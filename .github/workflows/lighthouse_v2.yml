name: Run Lighthouse CRON CI

on:
  push:
    branches:
      - 'lighthouse_v2'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lhci:
    name: Audit with Lighthouse CI (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: desktop
            collect_args: "--settings.preset=desktop"
            out_dir: "lighthouse-desktop"
          - target: mobile
            collect_args: "--settings.emulatedFormFactor=mobile"
            out_dir: "lighthouse-mobile"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node (>= 18.20)
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.x'

      - name: Install Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install Lighthouse CI CLI
        run: npm i -g @lhci/cli

      - name: Append to Job Summary — ${{ matrix.target }}
        if: always()
        run: |
          {
          echo "### Lighthouse ${{ matrix.target }} — Assertions";
          echo;
          echo '```';
          if [ -f "${{ matrix.out_dir }}/assert.txt" ]; then
           cat "${{ matrix.out_dir }}/assert.txt"
          else
           echo "No assertion output."
          fi
          echo '```';
          echo;
          echo "Artifact: \`${{ matrix.out_dir }}\`"
          } >> "$GITHUB_STEP_SUMMARY"
#      - name: Build Slack payload — ${{ matrix.target }}
#        if: always()
#        env:
#          OUT_DIR: ${{ matrix.out_dir }}
#          TARGET: ${{ matrix.target }}
#          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#          BRANCH: ${{ github.ref_name }}
#          SHA: ${{ github.sha }}
#        run: |
#          node <<'NODE'
#            const fs = require('fs');
#            const path = require('path');
#            const OUT_DIR = process.env.OUT_DIR;
#            const TARGET = process.env.TARGET;
#            const RUN_URL = process.env.RUN_URL;
#            const BRANCH = process.env.BRANCH;
#            const SHA = process.env.SHA;
#
#            const assertTxtPath = path.join(OUT_DIR, 'assert.txt');
#            const text = fs.existsSync(assertTxtPath) ? fs.readFileSync(assertTxtPath, 'utf8') : 'No assertion output.';
#
#            const header = `*Lighthouse ${TARGET}* on *${BRANCH}* (${SHA.substring(0,7)})\n<${RUN_URL}|View GitHub run>\n`;
#            const payload = {
#              text: header + '```' + text + '```'
#            };
#
#            fs.writeFileSync(path.join(OUT_DIR, 'slack.json'), JSON.stringify(payload));
#          NODE

      - name: Assert — ${{ matrix.target }}
        continue-on-error: true
        run: |
          lhci assert --config=lighthouserc.json

      - name: Prepare output dir — ${{ matrix.target }}
        if: always()
        run: |
          rm -rf "${{ matrix.out_dir }}"

      - name: Upload (filesystem) — ${{ matrix.target }}
        if: always()
        run: |
          lhci upload --config=lighthouserc.json --target=filesystem --outputDir="${{ matrix.out_dir }}"
          ls -la "${{ matrix.out_dir }}" || true

      - name: Upload ${{ matrix.target }} artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.out_dir }}
          path: ${{ matrix.out_dir }}