name: Run Lighthouse CRON CI

on:
  push:
    branches:
      - 'lighthouse_v2'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lhci:
    name: Audit with Lighthouse CI (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: desktop
            collect_args: "--settings.preset=desktop"
            out_dir: "lighthouse-desktop"
          - target: mobile
            collect_args: "--settings.emulatedFormFactor=mobile"
            out_dir: "lighthouse-mobile"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node (>= 18.20)
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.x'

      - name: Install Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install Lighthouse CI CLI
        run: npm i -g @lhci/cli

      - name: Collect — ${{ matrix.target }}
        env:
          CHROME_PATH: ${{ steps.setup-chrome.outputs.chrome-path }}
        run: |
          lhci collect --config=lighthouserc.json ${{ matrix.collect_args }}

      - name: Assert — ${{ matrix.target }}
        continue-on-error: true
        run: |
          lhci assert --config=lighthouserc.json

      - name: Summarize assertions → Job Summary — ${{ matrix.target }}
        if: always()
        env:
          TARGET: ${{ matrix.target }}
        run: |
          node .github/scripts/lhci-summary.js
#      - name: Summarize assertions → Job Summary — ${{ matrix.target }}
#        if: always()
#        env:
#          TARGET: ${{ matrix.target }}
#        run: |
#          ASSERT_FILE=".lighthouseci/assertion-results.json"
#
#          # Debug: show whether file exists and its size (helps detect the "empty array" case)
#          if [ -f "$ASSERT_FILE" ]; then
#            echo "assertion-results.json present, size: $(wc -c < "$ASSERT_FILE") bytes"
#          else
#            echo "assertion-results.json NOT found at $ASSERT_FILE"
#          fi
#
#          node <<'NODE'
#          const fs = require('fs');
#          const path = '.lighthouseci/assertion-results.json';
#          const target = process.env.TARGET || 'unknown';
#          const summaryPath = process.env.GITHUB_STEP_SUMMARY; // <- write directly to the official summary file
#
#          // Start section header regardless of failures (so you always see something in the Summary)
#          let md = `### Lighthouse CI Assertions — ${target}\n\n`;
#
#          if (!fs.existsSync(path)) {
#            md += "_No assertion results file found at `.lighthouseci/assertion-results.json`._\n";
#            fs.appendFileSync(summaryPath, md);
#            process.exit(0);
#          }
#
#          let results;
#          try {
#            results = JSON.parse(fs.readFileSync(path, 'utf8'));
#          } catch (e) {
#            md += `_Failed to parse \`${path}\`:_ ${String(e)}\n`;
#            fs.appendFileSync(summaryPath, md);
#            process.exit(0);
#          }
#
#          // Some LHCI versions can produce an empty array; handle it explicitly.
#          if (!Array.isArray(results) || results.length === 0) {
#            md += "_Assertion results file is empty._\n";
#            fs.appendFileSync(summaryPath, md);
#            process.exit(0);
#          }
#
#          const failing = results.filter(r => r?.passed === false || r?.status === 'fail');
#
#          if (failing.length === 0) {
#            md += "No validation issues. ✅\n";
#          } else {
#            md += `Found **${failing.length}** validation issue(s):\n\n`;
#            md += "| URL | Audit | Expected | Actual/Values | Operator | Level |\n";
#            md += "|-----|-------|----------|---------------|----------|-------|\n";
#            for (const r of failing) {
#              const url = r.url || (r.entity && r.entity.url) || "";
#              const audit = r.auditId || r.name || "";
#              const expected = r.expected !== undefined ? String(r.expected).replace(/\|/g, "\\|") : "";
#              const actual = Array.isArray(r.values) ? r.values.join(", ")
#                            : (r.actual !== undefined ? String(r.actual) : "");
#              const operator = r.operator || "";
#              const level = r.level || "";
#              md += `| ${url} | ${audit} | ${expected} | ${actual} | ${operator} | ${level} |\n`;
#            }
#            md += "\n";
#          }
#
#          fs.appendFileSync(summaryPath, md);
#          console.log("Wrote Lighthouse assertion summary.");
#          NODE

      - name: Prepare output dir — ${{ matrix.target }}
        if: always()
        run: |
          rm -rf "${{ matrix.out_dir }}"

      - name: Upload (filesystem) — ${{ matrix.target }}
        if: always()
        run: |
          lhci upload --config=lighthouserc.json --target=filesystem --outputDir="${{ matrix.out_dir }}"
          ls -la "${{ matrix.out_dir }}" || true

      - name: Upload ${{ matrix.target }} artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.out_dir }}
          path: ${{ matrix.out_dir }}